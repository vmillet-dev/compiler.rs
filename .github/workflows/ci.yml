name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build (${{ matrix.os }})
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.os != 'windows-latest' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: true

      - name: Build project
        run: cargo build --verbose

  test:
    name: Test (${{ matrix.os }})
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.os != 'windows-latest' }}
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: true

      - name: Run tests
        run: cargo test --verbose

  compile-and-execute:
    name: Compile & Execute (${{ matrix.platform_name }})
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform_name: Windows x64
            target: windows-x64
            nasm_format: win64
            gcc_arch: ""
            executable_name: output.exe
            nasm_output: output.obj
            gcc_flags: "-lmsvcrt"
            continue_on_error: false
          - os: ubuntu-latest
            platform_name: Linux x64
            target: linux-x64
            nasm_format: elf64
            gcc_arch: ""
            executable_name: output
            nasm_output: output.o
            gcc_flags: "-no-pie"
            continue_on_error: true
          - os: macos-latest
            platform_name: macOS (Rosetta 2)
            target: macos-auto
            nasm_format: macho64
            gcc_arch: "-arch x86_64"
            executable_name: output_macos
            nasm_output: output_macos.o
            gcc_flags: ""
            continue_on_error: true
      fail-fast: false
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.continue_on_error }}
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: true

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install nasm
          & "C:\Program Files\NASM\nasm.exe" -v

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y nasm gcc
          nasm -v
          gcc --version

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install nasm
          nasm -v
          gcc --version
          echo "Architecture: $(uname -m)"
          echo "Note: Compiling for x86_64 to run via Rosetta 2"

      - name: Create build directory
        run: mkdir -p build

      - name: Generate assembly code
        run: cargo run -- --target ${{ matrix.target }}

      - name: Assemble to object file (Windows)
        if: matrix.os == 'windows-latest'
        run: '& "C:\Program Files\NASM\nasm.exe" -f ${{ matrix.nasm_format }} build/output.asm -o build/${{ matrix.nasm_output }}'

      - name: Assemble to object file (Unix)
        if: matrix.os != 'windows-latest'
        run: nasm -f ${{ matrix.nasm_format }} build/output.asm -o build/${{ matrix.nasm_output }}

      - name: Link executable
        run: gcc ${{ matrix.gcc_arch }} -o build/${{ matrix.executable_name }} build/${{ matrix.nasm_output }} ${{ matrix.gcc_flags }}

      - name: Verify executable architecture (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          file build/${{ matrix.executable_name }}
          echo "✓ Executable created for x86_64 architecture (will run via Rosetta 2)"

      - name: Execute binary (Windows)
        if: matrix.os == 'windows-latest'
        run: .\build\${{ matrix.executable_name }}

      - name: Execute binary (Unix)
        if: matrix.os != 'windows-latest'
        run: ./build/${{ matrix.executable_name }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: executable-${{ matrix.os }}
          path: |
            build/${{ matrix.executable_name }}
            build/output.asm
          retention-days: 7

  summary:
    name: Build Summary
    if: always()
    needs: [build, test, compile-and-execute]
    runs-on: ubuntu-latest

    steps:
      - name: Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Build | Test | Compile & Execute |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|------|-------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Windows  | ${{ needs.build.result == 'success' && '✅' || '❌' }} | ${{ needs.test.result == 'success' && '✅' || '❌' }} | ${{ contains(needs.compile-and-execute.result, 'success') && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Linux    | ${{ needs.build.result == 'success' && '✅' || '❌' }} | ${{ needs.test.result == 'success' && '✅' || '❌' }} | ${{ contains(needs.compile-and-execute.result, 'success') && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| macOS    | ${{ needs.build.result == 'success' && '✅' || '❌' }} | ${{ needs.test.result == 'success' && '✅' || '❌' }} | ${{ contains(needs.compile-and-execute.result, 'success') && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** macOS binaries are compiled for x86_64 and run via Rosetta 2 on ARM64 machines." >> $GITHUB_STEP_SUMMARY